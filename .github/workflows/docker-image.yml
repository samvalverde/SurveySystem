name: Docker Image CI/CD

on:
  push:
    branches:
      - devSam

  pull_request:
    branches:
      - devSam

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: tasks
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: mysecretpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

      redis:
        image: redis:latest
        ports:
          - 6379:6379

      zookeeper:
        image: wurstmeister/zookeeper:latest
        ports:
          - 2181:2181

      kafka:
        image: wurstmeister/kafka:2.12-2.2.1
        ports:
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
          KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
        options: >-
          --depends-on zookeeper

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12.2"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          # Asegurarse de que todas las dependencias de test est√©n instaladas
          pip install pytest kafka-python

      - name: Run tests
        run: |
          poetry run pytest

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.result == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Build Docker image
        run: docker build -t ghcr.io/${{ github.repository_owner }}/surveysystem:latest .

      - name: Push Docker image to GitHub Container Registry
        run: docker push ghcr.io/${{ github.repository_owner }}/surveysystem:latest

      - name: Clean up Docker images
        run: docker image prune -f
